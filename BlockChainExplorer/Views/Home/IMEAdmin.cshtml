@{
    ViewBag.Title = "MULA Token Exchange Administration";
}
<h2>@ViewBag.Title.</h2>

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.10.1/bootstrap-table.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.10.1/bootstrap-table.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/1000hz-bootstrap-validator/0.11.5/validator.min.js"></script>

<script type="text/javascript" src="/Scripts/web3.js"></script>
<script type="text/javascript" src="/Scripts/big.min.js"></script>
<script type="text/javascript" src="/Scripts/bootbox.min.js"></script>
<script type="text/javascript">


    var tokenName;
    var tokenSymbol;
    var tokenDigits;

    var contractAddr = '0x882a957ff3d3a2df6aee5d8067175fa990a71a72';
    var reserveAcc = '0x5a5f9edec3df0708df6e4b35b871dc90b112c6f0';

    var mula;

  	$(function(){

	  if (typeof web3 !== 'undefined') {
	    web3 = new Web3(web3.currentProvider);
	  } else {
	    // set the provider you want from Web3.providers
	    web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
	  }

	  var abi = '[{"constant":false,"inputs":[{"name":"tokenName","type":"string"},{"name":"tokenSymbol","type":"string"}],"name":"updateTokenInformation","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"anAddress","type":"address"}],"name":"openAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newSellPrice","type":"uint256"},{"name":"newBuyPrice","type":"uint256"}],"name":"setPrices","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newTransactionFee","type":"uint256"}],"name":"setTransactionFee","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalReservesInEther","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"numberOfAccounts","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFromReserve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_newAddress","type":"address"}],"name":"removeOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"openMarketSale","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"killContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalCirculationInMulas","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_newAddress","type":"address"}],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalReservesInMulas","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"closeMarketSale","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"mulaBuyingOpened","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"sellPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"numberOfReserveAccounts","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_newAddress","type":"address"}],"name":"isMulaReserveAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokenName","type":"string"},{"name":"tokenSymbol","type":"string"}],"name":"setTokenInformation","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"openMulaSelfAddAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"computeReserves","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalCirculationInEther","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"standard","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"deleteContract","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"closeMulaSelfAddAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"marketSaleOpened","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newAddress","type":"address"}],"name":"removeMulaAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"allowSelfAddAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSavingsInEther","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"closeMulaBuying","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getMulaReserveEtherBalance","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newAddress","type":"address"}],"name":"addOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_newAddress","type":"address"}],"name":"isMulaAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalEtherReserves","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newAddress","type":"address"}],"name":"addMulaAccountSelf","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"buyPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"forceDeleteContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"Owners","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSavingsInMulas","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalReserves","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"withdrawEtherFromReserve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"transactionFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newAddress","type":"address"}],"name":"addMulaReserveAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"buy","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getMulaReserveBalance","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"maximumAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"frozenAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"minimumAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"MulaReserves","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"mintedAmount","type":"uint256"}],"name":"mintToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"MulaHolders","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"anAddress","type":"address"}],"name":"sellBackAccountBalance","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"_newAddress","type":"address"}],"name":"addMulaAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newReservePrice","type":"uint256"}],"name":"setReservePrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_newAddress","type":"address"}],"name":"removeMulaReserveAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"reservePrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"returnAllFunds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"sell","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"freeze","type":"bool"}],"name":"freezeAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newMinimumAmount","type":"uint256"}],"name":"setMinimumAmount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"selltoReserve","outputs":[{"name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"newMaximumAmount","type":"uint256"}],"name":"setMaximumAmount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"openMulaBuying","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"initialSupply","type":"uint256"},{"name":"tokenName","type":"string"},{"name":"decimalUnits","type":"uint8"},{"name":"tokenSymbol","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"target","type":"address"},{"indexed":false,"name":"frozen","type":"bool"}],"name":"FrozenFunds","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"target","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Withdrawal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"TransferTransactionFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"newName","type":"string"},{"indexed":false,"name":"newSymbol","type":"string"}],"name":"UpdatedTokenInformation","type":"event"}]';

	  var abi = JSON.parse(abi);
	  var contract = web3.eth.contract(abi);
	  mula = contract.at(contractAddr);
	  // console.log(mula);

	  tokenName = mula.name();
	  tokenSymbol = mula.symbol();
	  tokenDigits = mula.decimals().toNumber();

	  updateReserveInfo();

	  $('#mintReserve').on('click', function (e) {
	  	  if (!$('#mintAmount').val() || parseFloat($('#mintAmount').val()) <= 0) {
	    	  	  bootbox.alert("Invalid amount input!");
	    	  }
	    	  else {
	    		  var val = parseFloat($('#mintAmount').val());
	    		  bootbox.prompt({
	    		  	title: "Please input the admin password to continue!",
	    		  	inputType: 'password',
	    		  	callback: function (result) {
	    			  	if (result) {
	    				  	try {
	    				  		web3.personal.unlockAccount(reserveAcc, result)
	    				  		// var getData = mula.buy.getData();
	    				  		// web3.eth.sendTransaction({to:contractAddr, from:acc, data: getData, value: amount});
	    				  		mula.mintToken(val, {from: reserveAcc}, function(error, result) {
	    				  			if(!error) {
	    				  				console.log("Transaction Hash:" + result) // The hash of the transaction, which deploys the contract
	    				  			   	waitForTxToBeMined(result);
	    				  			}
	    				  			else {
	    				  				 alert("Transaction Failed! " + error);
	    				  				 console.error(error);
	    				  			}
	    				  		});
	    				  	}
	    			  		catch (err) {
	    				  		alert("Error: " + err.message);
	    				  		console.log(err);
	    			  		}
	    		  		}
	    		  	}
	    		  });
	    	  }
	    });

	    $('#buyRateUpdate').on('click', function (e) {
	    	  if (!$('#buyRate').val() || parseFloat($('#buyRate').val()) <= 0) {
	      	  	  bootbox.alert("Invalid amount input!");
	      	  }
	      	  else {
	      		  var val = parseFloat($('#buyRate').val());
	      		  bootbox.prompt({
	      		  	title: "Please input the admin password to continue!",
	      		  	inputType: 'password',
	      		  	callback: function (result) {
	      			  	if (result) {
	      				  	try {
	      				  		web3.personal.unlockAccount(reserveAcc, result)
	      				  		// var getData = mula.buy.getData();
	      				  		// web3.eth.sendTransaction({to:contractAddr, from:acc, data: getData, value: amount});
	      				  		mula.setPrices(val, val, {from: reserveAcc}, function(error, result) {
	      				  			if(!error) {
	      				  				console.log("Transaction Hash:" + result) // The hash of the transaction, which deploys the contract
	      				  			   	waitForTxToBeMined(result);
	      				  			}
	      				  			else {
	      				  				 alert("Transaction Failed! " + error);
	      				  				 console.error(error);
	      				  			}
	      				  		});
	      				  	}
	      			  		catch (err) {
	      				  		alert("Error: " + err.message);
	      				  		console.log(err);
	      			  		}
	      		  		}
	      		  	}
	      		  });
	      	  }
	      });

	    $('#sellRateUpdate').on('click', function (e) {
	    	  if (!$('#sellRate').val() || parseFloat($('#sellRate').val()) <= 0) {
	      	  	  bootbox.alert("Invalid amount input!");
	      	  }
	      	  else {
	      		  var val = parseFloat($('#sellRate').val());
	      		  bootbox.prompt({
	      		  	title: "Please input the admin password to continue!",
	      		  	inputType: 'password',
	      		  	callback: function (result) {
	      			  	if (result) {
	      				  	try {
	      				  		web3.personal.unlockAccount(reserveAcc, result)
	      				  		// var getData = mula.buy.getData();
	      				  		// web3.eth.sendTransaction({to:contractAddr, from:acc, data: getData, value: amount});
	      				  		mula.setReservePrice(val, {from: reserveAcc}, function(error, result) {
	      				  			if(!error) {
	      				  				console.log("Transaction Hash:" + result) // The hash of the transaction, which deploys the contract
	      				  			   	waitForTxToBeMined(result);
	      				  			}
	      				  			else {
	      				  				 alert("Transaction Failed! " + error);
	      				  				 console.error(error);
	      				  			}
	      				  		});
	      				  	}
	      			  		catch (err) {
	      				  		alert("Error: " + err.message);
	      				  		console.log(err);
	      			  		}
	      		  		}
	      		  	}
	      		  });
	      	  }
	      });

	    $('#tranFeeUpdate').on('click', function (e) {
	    	  if (!$('#tranFee').val() || parseFloat($('#tranFee').val()) <= 0) {
	      	  	  bootbox.alert("Invalid amount input!");
	      	  }
	      	  else {
	      		  var val = parseFloat($('#tranFee').val());
	      		  bootbox.prompt({
	      		  	title: "Please input the admin password to continue!",
	      		  	inputType: 'password',
	      		  	callback: function (result) {
	      			  	if (result) {
	      				  	try {
	      				  		web3.personal.unlockAccount(reserveAcc, result)
	      				  		// var getData = mula.buy.getData();
	      				  		// web3.eth.sendTransaction({to:contractAddr, from:acc, data: getData, value: amount});
	      				  		mula.setTransactionFee(val, {from: reserveAcc}, function(error, result) {
	      				  			if(!error) {
	      				  				console.log("Transaction Hash:" + result) // The hash of the transaction, which deploys the contract
	      				  			   	waitForTxToBeMined(result);
	      				  			}
	      				  			else {
	      				  				 alert("Transaction Failed! " + error);
	      				  				 console.error(error);
	      				  			}
	      				  		});
	      				  	}
	      			  		catch (err) {
	      				  		alert("Error: " + err.message);
	      				  		console.log(err);
	      			  		}
	      		  		}
	      		  	}
	      		  });
	      	  }
	      });

	      $('#buyToggle').on('click', function (e) {

		      var mulaBuyingOpened = mula.mulaBuyingOpened();
		      bootbox.prompt({
		        title: "Please input the admin password to continue!",
		        inputType: 'password',
		        callback: function (result) {
		      	  if (result) {
		      		try {
		      		  	web3.personal.unlockAccount(reserveAcc, result)
						if (mulaBuyingOpened) {
		      		  	  mula.closeMulaBuying({from: reserveAcc}, function(error, result) {
		      		  		if(!error) {
		      		  			console.log("Transaction Hash:" + result) // The hash of the transaction, which deploys the contract
		      		  			waitForTxToBeMined(result);
		      		  		}
		      		  		else {
		      		  			 alert("Transaction Failed! " + error);
		      		  			 console.error(error);
		      		  		}
		      		  	  });
		      		    }
		      		    else {
			      		  mula.openMulaBuying({from: reserveAcc}, function(error, result) {
			      		  	if(!error) {
			      		  		console.log("Transaction Hash:" + result) // The hash of the transaction, which deploys the contract
			      		  		waitForTxToBeMined(result);
			      		  	}
			      		  	else {
			      		  		 alert("Transaction Failed! " + error);
			      		  		 console.error(error);
			      		  	}
			      		  });
		      		    }
		      		}
		      	  	catch (err) {
		      		  	alert("Error: " + err.message);
		      		  	console.log(err);
		      	  	}
		          }
		        }
		      })
	      });

	    $('#enrollToggle').on('click', function (e) {

	    	  var allowSelfAddAccount = mula.allowSelfAddAccount();
	    	  bootbox.prompt({
	    		title: "Please input the admin password to continue!",
	    		inputType: 'password',
	    		callback: function (result) {
	    		  if (result) {
	    		  	try {
	    		  		web3.personal.unlockAccount(reserveAcc, result)
	    				if (allowSelfAddAccount) {
	    		  		  mula.closeMulaSelfAddAccount({from: reserveAcc}, function(error, result) {
	    		  		  	if(!error) {
	    		  		  		console.log("Transaction Hash:" + result) // The hash of the transaction, which deploys the contract
	    		  		  		waitForTxToBeMined(result);
	    		  		  	}
	    		  		  	else {
	    		  		  		 alert("Transaction Failed! " + error);
	    		  		  		 console.error(error);
	    		  		  	}
	    		  		  });
	    		  		}
	    		  		else {
	    			  	  mula.openMulaSelfAddAccount({from: reserveAcc}, function(error, result) {
	    			  		if(!error) {
	    			  		  	console.log("Transaction Hash:" + result) // The hash of the transaction, which deploys the contract
	    			  		  	waitForTxToBeMined(result);
	    			  		}
	    			  		else {
	    			  		  	 alert("Transaction Failed! " + error);
	    			  		  	 console.error(error);
	    			  		}
	    			  	  });
	    		  		}
	    		  	}
	    		  	catch (err) {
	    		  		alert("Error: " + err.message);
	    		  		console.log(err);
	    		  	}
	    		  }
	    		}
	    	  })
	      });

	    $('#disenrollBtn').on('click', function (e) {

	    	  var acc = $('#enrollSelect').val();
			  var bal = mula.balanceOf(acc).toNumber();

			  if (bal == 0) {
		    	  bootbox.prompt({
		    		title: "Please input the admin password to continue!",
		    		inputType: 'password',
		    		callback: function (result) {
		    		  if (result) {
		    		  	try {
		    		  		web3.personal.unlockAccount(reserveAcc, result)
		    				mula.removeMulaAccount(acc, {from: reserveAcc}, function(error, result) {
		    					if(!error) {
		    						console.log("Transaction Hash:" + result) // The hash of the transaction, which deploys the contract
		    						waitForTxToBeMined(result);
		    					}
		    					else {
		    						 alert("Transaction Failed! " + error);
		    						 console.error(error);
		    					}
		    				});
		    		  	}
		    		  	catch (err) {
		    		  		alert("Error: " + err.message);
		    		  		console.log(err);
		    		  	}
		    		  }
		    		}
		    	  })
	    	  }
			else {
			   bootbox.alert("Cannot disenroll the account: the account MULA balacne must be zero to allow to be disenrolled.");
			}
	      });

	      $('#enrollBtn').on('click', function (e) {

	      	  var acc = $('#enrollSelect').val();

		      bootbox.prompt({
		      	title: "Please input the admin password to continue!",
		      	inputType: 'password',
		      	callback: function (result) {
		      	  if (result) {
		      		try {
		      		  	web3.personal.unlockAccount(reserveAcc, result)
		      			mula.addMulaAccount(acc, {from: reserveAcc}, function(error, result) {
		      				if(!error) {
		      					console.log("Transaction Hash:" + result) // The hash of the transaction, which deploys the contract
		      					waitForTxToBeMined(result);
		      				}
		      				else {
		      					 alert("Transaction Failed! " + error);
		      					 console.error(error);
		      				}
		      			});
		      		}
		      		catch (err) {
		      		  	alert("Error: " + err.message);
		      		  	console.log(err);
		      		}
		      	  }
		      	}
		      })
	        });

		$('#withdrawBtn').on('click', function (e) {

			var acc = $('#assignSelect').val();

			bootbox.prompt({
			title: "Please input the admin password to continue!",
			inputType: 'password',
			callback: function (result) {
			  if (result) {
			  	try {
			  	  	web3.personal.unlockAccount(reserveAcc, result)
			  		mula.removeMulaReserveAccount(acc, {from: reserveAcc}, function(error, result) {
			  			if(!error) {
			  				console.log("Transaction Hash:" + result) // The hash of the transaction, which deploys the contract
			  				waitForTxToBeMined(result);
			  			}
			  			else {
			  				 alert("Transaction Failed! " + error);
			  				 console.error(error);
			  			}
			  		});
			  	}
			  	catch (err) {
			  	  	alert("Error: " + err.message);
			  	  	console.log(err);
			  	}
			  }
			}
	      })
	  });

	  $('#assignBtn').on('click', function (e) {

	  		var acc = $('#assignSelect').val();

	  		bootbox.prompt({
	  		title: "Please input the admin password to continue!",
	  		inputType: 'password',
	  		callback: function (result) {
	  		  if (result) {
	  		  	try {
	  		  	  	web3.personal.unlockAccount(reserveAcc, result)
	  		  		mula.addMulaReserveAccount(acc, {from: reserveAcc}, function(error, result) {
	  		  			if(!error) {
	  		  				console.log("Transaction Hash:" + result) // The hash of the transaction, which deploys the contract
	  		  				waitForTxToBeMined(result);
	  		  			}
	  		  			else {
	  		  				 alert("Transaction Failed! " + error);
	  		  				 console.error(error);
	  		  			}
	  		  		});
	  		  	}
	  		  	catch (err) {
	  		  	  	alert("Error: " + err.message);
	  		  	  	console.log(err);
	  		  	}
	  		  }
	  		}
	  	  })
	    });

	    async function waitForTxToBeMined (txHash) {
	  	let txReceipt;
	  	while (!txReceipt) {
	  	  	try {
	  	  	  txReceipt = await web3.eth.getTransactionReceipt(txHash);
	  	  	} catch (err) {
	  	  	  return indicateFailure(err);
	  	  	}
	  	}
	  	indicateSuccess(txReceipt);
	    }

	    function indicateSuccess(receipt){
	  	 bootbox.alert("Transaction Succeed! Transaction hash: " + receipt.transactionHash);
	  	 console.log("Transaction successfully mined: Block #: " + receipt.blockNumber + ", Block Hash: " + receipt.blockNumber);
	  	 updateReserveInfo();
	    }
	    function indicateFailure(err){
	  	 bootbox.alert("Transaction Failed! " + err);
	  	 console.error(err);
	    }

	    if (web3.eth.accounts.length > 0) {
			for (i=0;i<web3.eth.accounts.length;i++) {
                                                  if (!mula.isMulaReserveAccount(web3.eth.accounts[i]))
                                                  {
                                                  $('#enrollSelect').append('<option value="'+web3.eth.accounts[i]+'">'+web3.eth.accounts[i]+'</option>');
				}
				if (web3.eth.accounts[i] != reserveAcc) {
					$('#assignSelect').append('<option value="'+web3.eth.accounts[i]+'">'+web3.eth.accounts[i]+'</option>');
				}
			}
		 }

		 $('#enrollSelect').on('change', function(e){
			 var addr = $('#enrollSelect').val();
			 if (mula.isMulaAccount(addr)) {
				 $('#enrollBtn').prop('disabled', true);
				 $('#disenrollBtn').prop('disabled', false);
			 }
			 else {
				 $('#enrollBtn').prop('disabled', false);
				 $('#disenrollBtn').prop('disabled', true);
			 }
		 });
		 $('#enrollSelect').change();

		 $('#assignSelect').on('change', function(e){
			 var addr = $('#assignSelect').val();
			 if (mula.isMulaReserveAccount(addr)) {
				 $('#assignBtn').prop('disabled', true);
				 $('#withdrawBtn').prop('disabled', false);
			 }
			 else {
				 $('#assignBtn').prop('disabled', false);
				 $('#withdrawBtn').prop('disabled', true);
			 }
		 });
		 $('#assignSelect').change();
  	});

  	function updateReserveInfo() {
  		  web3.eth.defaultAccount = reserveAcc;
  		  web3.personal.unlockAccount(reserveAcc, "testing");

  		  var buyPrice = parseFloat(mula.buyPrice());
  		  var reservePrice = parseFloat(mula.reservePrice());
  		  var totalSupply = parseFloat(mula.totalSupply());
  		  // var totalReserves = parseFloat(mula.getMulaReserveBalance());
  		  var totalReserves = getTotolMulaReserve();
  		  // var totalEtherReserves = parseFloat(mula.getMulaReserveEtherBalance().toNumber());
  		  var totalEtherReserves = getTotalEitherReserves();
  		  var totalReservesInEther = parseFloat(totalEtherReserves + totalReserves/fixDigitsFromEther(buyPrice));
  		  var totalReservesInMulas = parseFloat(totalEtherReserves / fixDigitsFromEther(buyPrice) + totalReserves);
  		  var totalCirculationInMulas = parseFloat(totalSupply) - parseFloat(totalReserves);
  		  var totalCirculationInEther = parseFloat(totalCirculationInMulas / fixDigitsFromEther(reservePrice));
  		  var transactionFee = parseFloat(mula.transactionFee());
  		  var mulaBuyingOpened = mula.mulaBuyingOpened();
  		  var allowSelfAddAccount = mula.allowSelfAddAccount();

  		  $('#total_mula_supply').text(totalSupply);
  		  $('#buy_price').text(buyPrice);
  		  $('#reserve_price').text(reservePrice);
  		  $('#total_mula_reserve').text(totalReserves);
  		  $('#total_ether_reserve').text(fixDigitsToEther(totalEtherReserves));
  		  $('#reserve_value_ether').text(fixDigitsToEther(totalReservesInEther));
  		  $('#reserve_value_mula').text(totalReservesInMulas);
  		  $('#circul_value_mula').text(totalCirculationInMulas);
  		  $('#circul_value_ether').text(fixDigitsToEther(totalCirculationInEther));
  		  $('#tran_fee_mula').text(transactionFee);
  		  if (mulaBuyingOpened) {
  			  $('#is_buy_open').text('Yes');
  		  }
  		  else {
  			  $('#is_buy_open').text('No');
  		  }
  		  if (allowSelfAddAccount) {
  		  	  $('#is_auto_enroll').text('Yes');
  		  }
  		  else {
  			  $('#is_auto_enroll').text('No');
  		  }

  		  var allowSelfAddAccount = mula.allowSelfAddAccount();
  		  if (allowSelfAddAccount) {
	  		  $('#enrollSelect').parents('fieldset').first().hide();
  		  }
  		  else {
	  		  $('#enrollSelect').parents('fieldset').first().show();
  		  }
  		  $('#enrollSelect').change();

  		  $('#assignSelect').change();
  	  }

  	  function getTotalEitherReserves() {
  		  var val = 0;
  		  var numReserves = mula.numberOfReserveAccounts();
  		  console.log(numReserves);
  		  for (var i=0; i<numReserves; i++){
  			  var bal = web3.eth.getBalance(mula.MulaReserves(i))
  			  val = val + bal.toNumber();
  			  console.log(bal.toNumber());
  		  }
  		  return val;
  	  }

  	  function getTotolMulaReserve() {
  		  var val = 0;
  		  var numReserves = mula.numberOfReserveAccounts();
  		  for (var i=0; i<numReserves; i++){
  			  val = val + mula.balanceOf(mula.MulaReserves(i)).toNumber()
  		   }
  		   return val;
  	  }

  	  function fixDigitsToEther(value) {
  	    // var val = parseFloat(value);
  	    // return value/Math.pow(10,18);
  	    var val = new Big(value);
  	    var factor = new Big(10).pow(18);
  	    var res = val.div(factor);
  	    return res;
  	  }

  	  function fixDigitsFromEther(value) {
  	    // var val = parseFloat(value);
  	    // return value*Math.pow(10,18);
  	    var val = new Big(value);
  	    var factor = new Big(10).pow(18);
  	    var res = val.times(factor);
  	    return res;
  	  }

</script>

  <style type="text/css">

	body {
		background: #337ab7
	}

	.header {
		color: white;
	}

	.info-table {
		border: solid 1px #DDEEEE;
		border-collapse: collapse;
		border-spacing: 0;
		font: normal 13px Arial, sans-serif;
	}
	.info-table tbody td {
		border: solid 1px #DDEEEE;
		color: #333;
		padding: 10px;
		text-shadow: 1px 1px 1px #fff;
	}
	.info-table-rounded {
		border: none;
	}
	.info-table-rounded tbody td {
		border: none;
		border-top: solid 1px #957030;
		background-color: #EED592;
	}
	.info-table-rounded tbody tr:first-child td:first-child {
		border-radius: 10px 0 0 0;
	}
	.info-table-rounded tbody tr:first-child td:last-child {
		border-radius: 0 10px 0 0;
	}
	.info-table-rounded tbody tr:last-child td:first-child {
		border-radius: 0 0 0 10px;
	}
	.info-table-rounded tbody tr:last-child td:last-child {
		border-radius: 0 0 10px 0;
	}

	table#tableBlock td, table#tableTran td { white-space:nowrap; }

	legend.scheduler-border {
		width:inherit; /* Or auto */
		padding:0 10px; /* To give a bit of padding on the left and right */
		border-bottom:none;
	}

	fieldset.scheduler-border {
		border: 1px groove #ddd !important;
		padding: 0 1.4em 1.4em 1.4em !important;
		margin: 0 0 1.5em 0 !important;
		-webkit-box-shadow:  0px 0px 0px 0px #000;
				box-shadow:  0px 0px 0px 0px #000;
	}

	legend.scheduler-border {
		font-size: 1.2em !important;
		font-weight: bold !important;
		text-align: left !important;

	}

	.table thead th {
		vertical-align: bottom;
		border-bottom: 2px solid #eceeef;
	}

	.thead-inverse th {
		color: #fff;
		background-color: #292b2c;
	}

	.thead-default th {
	  color: #464a4c;
	  background-color: #eceeef;
	}

	.table td, .table th {
		padding: .75rem;
		vertical-align: top;
		border-top: 1px solid #eceeef;
	}

	.table-striped tbody tr:nth-of-type(odd) {
		background-color: rgba(0,0,0,.05);
	}

  </style>


  <div class="header" style="padding-left:50px;">
	<h3>Moolah Token Administration</h3>
  </div>


	<fieldset class="scheduler-border">
	  <legend class="scheduler-border">Mint MULAs</legend>
	  <table class="info-table info-table-rounded">
	    <tr>
		  <td style="width:300px;">Total MULA Supply:</td>
		  <td style="width:300px;"><strong id="total_mula_supply"></strong></td>
		  <td style="width:100px;">MULA</td>
	    </tr>
		<tr>
		  <td style="width:300px;">Total MULAs in Reserve:</td>
		  <td><strong id="total_mula_reserve"></strong></td>
		  <td>MULA</td>
		</tr>
		<tr>
		  <td>Total Value of Circulating MULAs:</td>
		  <td><strong id="circul_value_mula"></strong></td>
		  <td>MULA</td>
		</tr>
	  </table>
	  <h5>Amount to Mint (MULA): </h5>
	  <input type="number" id="mintAmount" min="0" step="0.1" style="width:400px;"/>
	  <br>
	  <button type="button" class="btn btn-primary" id="mintReserve" style="margin-top:5px;">Mint</button>
	</fieldset>
	<br>
	<fieldset class="scheduler-border">
	  <legend class="scheduler-border">MULA Purchase Rate</legend>
	  <table class="info-table info-table-rounded">
		<tr>
		  <td style="width:300px;">Mula Reserve Purchase Price per Ether:</td>
		  <td style="width:300px;"><strong id="buy_price"></strong></td>
		  <td style="width:100px;">MULA/ETH</td>
		</tr>
	  </table>
	  <h5>Purchase Rate (MULA/ETH): </h5>
	  <input type="number" id="buyRate" min="0" step="0.1" style="width:400px;"/>
	  <br>
	  <button type="button" class="btn btn-primary" id="buyRateUpdate" style="margin-top:5px;">Set</button>
	</fieldset>
	<br>
	<fieldset class="scheduler-border">
	  <legend class="scheduler-border">MULA Sell-Back Rate</legend>
	  <table class="info-table info-table-rounded">
		<tr>
		  <td style="width:300px;">Mula Reserve Sell Price per Ether:</td>
		  <td style="width:300px;"><strong id="reserve_price"></strong></td>
		  <td style="width:100px;">MULA/ETH</td>
		</tr>
	  </table>
	  <h5>Sell-Back Rate (MULA/ETH): </h5>
	  <input type="number" id="sellRate" min="0" step="0.1" style="width:400px;"/>
	  <br>
	  <button type="button" class="btn btn-primary" id="sellRateUpdate" style="margin-top:5px;">Set</button>
	</fieldset>
	<br>
	<fieldset class="scheduler-border">
	  <legend class="scheduler-border">Transaction Fee</legend>
	  <table class="info-table info-table-rounded">
		<tr>
		  <td style="width:300px;">Transaction Fee:</td>
		  <td style="width:300px;"><strong id="tran_fee_mula"></strong></td>
		  <td style="width:100px;">MULA</td>
		</tr>
	  </table>
	  <h5>Transaction Fee: </h5>
	  <input type="number" id="tranFee" min="0" step="0.1" style="width:400px;"/>
	  <br>
	  <button type="button" class="btn btn-primary" id="tranFeeUpdate" style="margin-top:5px;">Set</button>
	</fieldset>
	<br>
	<fieldset class="scheduler-border">
	  <legend class="scheduler-border">Open ICO</legend>
	  <table class="info-table info-table-rounded">
		<tr>
		  <td style="width:300px;">Is MULA ICO Opened?</td>
		  <td style="width:300px;"><strong id="is_buy_open"></strong></td>
		  <td style="width:100px;">&nbsp;</td>
		</tr>
	  </table>
	  <br>
	  <button type="button" class="btn btn-primary" id="buyToggle" style="margin-top:5px;">Toggle</button>
	</fieldset>
	<br>
	<fieldset class="scheduler-border">
	  <legend class="scheduler-border">Allow Enrollment</legend>
	  <table class="info-table info-table-rounded">
		<tr>
		  <td style="width:300px;">Is Self ICO Enrollment Allowed?</td>
		  <td style="width:300px;"><strong id="is_auto_enroll"></strong></td>
		  <td style="width:100px;">&nbsp;</td>
		</tr>
	  </table>
	  <br>
	  <button type="button" class="btn btn-primary" id="enrollToggle" style="margin-top:5px;">Toggle</button>
	</fieldset>
	<br>
	<fieldset class="scheduler-border">
	  <legend class="scheduler-border">Manually Enroll/Disenroll MULA Account</legend>
	  <h5>From: </h5>
	  <select id="enrollSelect" style="width:400px;height:28px;"></select>
	  <br>
	  <button type="button" class="btn btn-primary" id="enrollBtn" style="margin-top:5px;">Enroll</button>
	  <button type="button" class="btn btn-primary" id="disenrollBtn" style="margin-top:5px;">Disenroll</button>
	</fieldset>
	<fieldset class="scheduler-border">
	  <legend class="scheduler-border">Assign Reserver Account</legend>
	  <h5>From: </h5>
	  <select id="assignSelect" style="width:400px;height:28px;"></select>
	  <br>
	  <button type="button" class="btn btn-primary" id="assignBtn" style="margin-top:5px;">Assign</button>
	  <button type="button" class="btn btn-primary" id="withdrawBtn" style="margin-top:5px;">Withdraw</button>
	</fieldset>
